name: SpringBoot-CI

on:
  pull_request:
    branches: [dev, main]
  push:
    branches: [dev, main]

env:
  PROJ_DIR: ./isa
  PROJ_DIR_FE: ./isa-spa
  DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/isa
  DOCKERHUB_REPO_FE: ${{ secrets.DOCKERHUB_USERNAME }}/isa-front

jobs:
  ci-pipe:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Lint commit messages
        uses: wagoid/commitlint-github-action@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build and Test with Maven - BE
        run: mvn -B test --file ./isa/pom.xml

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
          cache: "npm"
          cache-dependency-path: ${{ env.PROJ_DIR_FE }}
          registry-url: "https://npm.pkg.github.com"
      - name: Build with NPM - FE
        working-directory: ${{ env.PROJ_DIR_FE }}
        run: |
          npm ci
          npm run build --if-present

      - name: Create a Release
        id: version
        if: github.event_name == 'push'
        run: |
          npm install semantic-release@19.0.5
          npm install semantic-release-export-data@1.0.1
          npx semantic-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish packages to GPR
        if: github.event_name == 'push'
        run: |
          mvn --file ${{ env.PROJ_DIR }}/pom.xml --batch-mode deploy -DskipTests -Drevision=${{ steps.version.outputs.new-release-version }}
          cd ${{ env.PROJ_DIR_FE }}
          npm version ${{ steps.version.outputs.new-release-version }}
          npm publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: github.event_name == 'push'
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build BE image and push to Docker Hub
        if: github.event_name == 'push'
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.PROJ_DIR }}
          tags: ${{ env.DOCKERHUB_REPO }}:latest, ${{ env.DOCKERHUB_REPO }}:${{ steps.version.outputs.new-release-version }}
          push: true
          cache-from: type=registry,ref=${{ env.DOCKERHUB_REPO }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_REPO }}:buildcache,mode=max
      - name: Build FE image and push to Docker Hub
        if: github.event_name == 'push'
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.PROJ_DIR_FE }}
          tags: ${{ env.DOCKERHUB_REPO_FE }}:latest, ${{ env.DOCKERHUB_REPO_FE }}:${{ steps.version.outputs.new-release-version }}
          push: true
          cache-from: type=registry,ref=${{ env.DOCKERHUB_REPO_FE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_REPO_FE }}:buildcache,mode=max

      - name: Copy FE source files
        if: github.event_name == 'push'
        run: |
          cp -R "${{ env.PROJ_DIR_FE }}" "./deployment/terraform/isa_spa/source"

      - name: Deploy app to TEST env
        if: github.event_name == 'push' && github.ref_name == 'develop'
        run: |
          cd ./deployment
          echo "TERRAFORM_BACKEND=isa-terraform-test" > env.conf
          echo "APP_NAME=isa-backend-test" >> env.conf
          echo "GATEWAY_NAME=isa-frontend-test" >> env.conf
          printf "HEROKU_EMAIL=%s\n" ${{ secrets.HEROKU_TEST_EMAIL }} >> env.conf
          printf "HEROKU_API_KEY=%s" ${{ secrets.HEROKU_TEST_API_KEY }} >> env.conf
          docker compose up destroy
          docker compose up deploy
          docker compose up deploy
